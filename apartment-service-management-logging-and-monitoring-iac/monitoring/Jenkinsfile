pipeline {
    agent any
    environment {
        gitUrl = "https://pscode.lioncloud.net/apartment-service-management-solution/apartment-service-management-logging-and-monitoring-iac"
        branch = "*/main"
        region = "us-east-1"
        cluster = "asms-cluster"
        prometheus = "prometheus"
        grafana = "grafana"
    }
    stages {
        stage('Checkout') {
            steps {
               checkout changelog: false, poll: false, scm: scmGit(branches: [[name: "$branch"]], extensions: [], userRemoteConfigs: [[credentialsId: 'Token', url: "$gitUrl"]])
            }
        }
        stage('Create NameSpace') {
            steps {
                sh "aws eks update-kubeconfig --name $cluster --region $region"
                sh "kubectl get ns | grep -q \"^$prometheus \" || kubectl create ns $prometheus"
                sh "kubectl get ns | grep -q \"^$grafana \" || kubectl create ns $grafana"
                sh "kubectl get ns"
                sh "helm repo add prometheus-community https://prometheus-community.github.io/helm-charts --force-update"
                sh "helm repo add grafana https://grafana.github.io/helm-charts --force-update"
                sh "helm repo ls"
            }
        }
        stage('Deploy Prometheus') {
            steps {
                sh "pwd"
                // sh "helm install prometheus prometheus-community/prometheus --namespace $prometheus --set alertmanager.persistentVolume.enabled=false --set server.persistentVolume.enabled=false --set server.service.type=LoadBalancer"
                sh "helm upgrade prometheus --install prometheus-community/prometheus -n $prometheus --set alertmanager.persistentVolume.enabled=false --set server.persistentVolume.enabled=false --set server.service.type=LoadBalancer"
                sh "helm ls -n $prometheus"
                sh "kubectl get all -n $prometheus"
            }
        }
        stage('Deploy Grafana') {
            steps {
                sh "pwd"
                // sh "helm install kibana elastic/kibana -f kibana.values -n $grafana"
                // sh "helm upgrade kibana --install elastic/kibana -f kibana.values -n $grafana --timeout 10m30s"
                sh "helm upgrade grafana --install grafana/grafana --namespace $grafana --values ~/grafana.yaml --set persistence.enabled=false --set persistence.enabled=false --set adminPassword='secretpass' --set service.type=LoadBalancer"
                sh "helm ls -n $grafana"
                sh "kubectl get all -n $grafana"
            }
        }
    }
}